<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/store/serializers.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/store/serializers.py" />
              <option name="originalContent" value="from rest_framework import serializers&#10;&#10;from store.models import Category, Products, Orders, Payment, UserProfile&#10;from djoser.serializers import UserCreateSerializer as BaseUserSerializer&#10;from django.contrib.auth import get_user_model&#10;&#10;User = get_user_model()&#10;&#10;&#10;# class CategorySerializer(serializers.Serializer):&#10;#     name = serializers.CharField(max_length=100)&#10;#     description = serializers.CharField(max_length=200)&#10;#     product_count = serializers.IntegerField(read_only=True)&#10;&#10;&#10;class UserCreateSerializer(BaseUserSerializer):&#10;    class Meta(BaseUserSerializer.Meta):&#10;        model = User&#10;        fields = ('username', 'email', 'first_name', 'last_name', 'password',)&#10;&#10;    def create(self, validated_data):&#10;        data = validated_data.pop('phone', None)&#10;        user = super().create(validated_data)&#10;        print(&quot;Data: &quot; + self.initial_data)&#10;        UserProfile.objects.update_or_create(&#10;            user=user,&#10;            defaults={&#10;                'phone': data&#10;            }&#10;        )&#10;        return user&#10;&#10;&#10;# class UserProfileSerializer(BaseUserSerializer):&#10;#     class Meta(BaseUserSerializer.Meta):&#10;#         model = User&#10;#         fields = ('id', 'username', 'email', 'first_name', 'last_name')&#10;&#10;&#10;class PaymentSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Payment&#10;        fields = ('id', 'method', 'amount', 'is_paid', 'paid_at')&#10;&#10;&#10;class OrderSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Orders&#10;        fields = ('id', 'qty', 'is_deleted', 'product', 'status')&#10;&#10;&#10;class CategorySerializer(serializers.ModelSerializer):&#10;    product_count = serializers.IntegerField(read_only=True)&#10;    status = serializers.SerializerMethodField()&#10;&#10;    class Meta:&#10;        model = Category&#10;        fields = ('id', 'name', 'description', 'product_count', 'status')&#10;&#10;    def get_status(self, obj):&#10;        count = getattr(obj, 'product_count', 0)&#10;        if count == 0:&#10;            return 'None'&#10;        elif count &lt;= 3:&#10;            return 'Fewer'&#10;        else:&#10;            return 'Too many'&#10;&#10;&#10;class ProductSerializer(serializers.ModelSerializer):&#10;    order_count = serializers.IntegerField(read_only=True)&#10;&#10;    class Meta:&#10;        model = Products&#10;        fields = ('id', 'name', 'price', 'qty', 'is_delete', 'created_date', 'categories', 'order_count')&#10;&#10;# Serializer&#10;# class ProductSerializer(serializers.Serializer):&#10;#     name = serializers.CharField(max_length=100)&#10;#     price = serializers.FloatField()&#10;#     qty = serializers.IntegerField()&#10;#     is_deleted = serializers.BooleanField(default=False)&#10;#     created_date = serializers.DateTimeField()&#10;#     categories = CategorySerializer(many=True, read_only=True)&#10;" />
              <option name="updatedContent" value="from rest_framework import serializers&#10;&#10;from store.models import Category, Products, Orders, Payment, UserProfile&#10;from djoser.serializers import UserCreateSerializer as BaseUserSerializer&#10;from django.contrib.auth import get_user_model&#10;&#10;User = get_user_model()&#10;&#10;&#10;# class CategorySerializer(serializers.Serializer):&#10;#     name = serializers.CharField(max_length=100)&#10;#     description = serializers.CharField(max_length=200)&#10;#     product_count = serializers.IntegerField(read_only=True)&#10;&#10;&#10;class UserCreateSerializer(BaseUserSerializer):&#10;    class Meta(BaseUserSerializer.Meta):&#10;        model = User&#10;        fields = ('username', 'email', 'first_name', 'last_name', 'password',)&#10;&#10;    def create(self, validated_data):&#10;        phone_data = self.initial_data.get('phone', None)&#10;        user = super().create(validated_data)&#10;        print(&quot;Phone Data:&quot;, phone_data)&#10;        if phone_data:&#10;            UserProfile.objects.update_or_create(&#10;                user=user,&#10;                defaults={&#10;                    'phone': phone_data&#10;                }&#10;            )&#10;        return user&#10;&#10;&#10;# class UserProfileSerializer(BaseUserSerializer):&#10;#     class Meta(BaseUserSerializer.Meta):&#10;#         model = User&#10;#         fields = ('id', 'username', 'email', 'first_name', 'last_name')&#10;&#10;&#10;class PaymentSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Payment&#10;        fields = ('id', 'method', 'amount', 'is_paid', 'paid_at')&#10;&#10;&#10;class OrderSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Orders&#10;        fields = ('id', 'qty', 'is_deleted', 'product', 'status')&#10;&#10;&#10;class CategorySerializer(serializers.ModelSerializer):&#10;    product_count = serializers.IntegerField(read_only=True)&#10;    status = serializers.SerializerMethodField()&#10;&#10;    class Meta:&#10;        model = Category&#10;        fields = ('id', 'name', 'description', 'product_count', 'status')&#10;&#10;    def get_status(self, obj):&#10;        count = getattr(obj, 'product_count', 0)&#10;        if count == 0:&#10;            return 'None'&#10;        elif count &lt;= 3:&#10;            return 'Fewer'&#10;        else:&#10;            return 'Too many'&#10;&#10;&#10;class ProductSerializer(serializers.ModelSerializer):&#10;    order_count = serializers.IntegerField(read_only=True)&#10;&#10;    class Meta:&#10;        model = Products&#10;        fields = ('id', 'name', 'price', 'qty', 'is_delete', 'created_date', 'categories', 'order_count')&#10;&#10;# Serializer&#10;# class ProductSerializer(serializers.Serializer):&#10;#     name = serializers.CharField(max_length=100)&#10;#     price = serializers.FloatField()&#10;#     qty = serializers.IntegerField()&#10;#     is_deleted = serializers.BooleanField(default=False)&#10;#     created_date = serializers.DateTimeField()&#10;#     categories = CategorySerializer(many=True, read_only=True)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>